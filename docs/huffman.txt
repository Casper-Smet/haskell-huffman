-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/Casper-Smet/haskell-huffman/blob/master/README.md</a>
@package huffman
@version 0.1.0.0

module Lib

-- | The <a>countValues</a> function counts each unique character in a
--   string. Adapted from <a>https://stackoverflow.com/a/3711137</a>.
countValues :: String -> [(Char, Int)]

-- | The <a>createNodes</a> function creates a Node for each tuple. The
--   frequency of a character equals its Weight.
createNodes :: [(Char, Int)] -> [HuffmanTree]

-- | The <a>createTree</a> function recursively creates one HuffmanTree
--   from a list of HuffmanTrees. | It merges the two HuffmanTree with the
--   lowest Weight, adds them to the list of HuffmanTrees and repeats until
--   only one tree is left
createTree :: [HuffmanTree] -> HuffmanTree
encodeTree :: HuffmanTree -> [(Char, [Int])]

-- | The <a>encodeString</a> function completes Huffman Encoding on text
--   using a Map (see <a>encodeTree</a> and subsequently <a>tupleToMap</a>)
encodeString :: String -> Map Char [Int] -> [Int]

-- | The <a>decodeList</a> function decodes a Huffman code using Huffman
--   Codes in the form of a Map. | Checks if xs is a member of m. | If it
--   is a member, it grabs that values calls itself again with an empty xs
--   and xss as it is. | If it isn't a member of m, it calls itself where
--   xs = xs and the first value of xss, and xss is the tail of xss
decodeList :: [Int] -> Map [Int] Char -> String

-- | The <a>tupleToMap</a> function is a wrapper for Data.Map.fromList.
--   This is necessary for encoding the original text.
tupleToMap :: [(Char, [Int])] -> Map Char [Int]
codedString :: String -> [Int]
instance GHC.Classes.Eq Lib.HuffmanTree
instance GHC.Show.Show Lib.HuffmanTree
instance GHC.Classes.Ord Lib.HuffmanTree
